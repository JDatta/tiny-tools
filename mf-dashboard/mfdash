#!/usr/bin/python

import json
import requests
import operator
from pip.cmdoptions import pre

row_format = "{:25}: {:10.2f} ==> {:10.2f} ({:>7} since {}) ({:>7} yearly)"    
total_format = "{:25}: {:10.2f} ==> {:10.2f} ({:>7})"    

funds_file_name = "funds.json"
mashape_url = "https://mutualfundsnav.p.mashape.com/"
mashape_header= {
        "X-Mashape-Key": "SyGQGfvmSQmshEVSmUo7a0ef2SwFp1noLMxjsnmGM6Mc1hl5uv",
        "Content-Type": "application/json",
        "Accept": "application/json"
    } 

"""
Populates the funds json with current NAV Value. 
Present implementation uses mashape.com APIs. Alternatively, we can download
text file from amfi and parse it. 
"""
def populate_funds_nav(funds):
    # Get data from mashape and populate the NAV and date fields of funds json
    #codes = map(operator.itemgetter('scode'), funds.values())
    codes = [x["scode"] for x in funds.values()]
    navs = []
    for i in range(0, len(codes), 5):
        payload = {"scodes": codes[i:i+5]}
        r = requests.post(mashape_url, data = json.dumps(payload), headers = mashape_header)
        content = json.loads(r.content)
        navs.extend(content)

    # Convert navs list to a map for easy lookup
    nav_map = {}
    for nav_item in navs:
        nav_map[nav_item["scode"]] = nav_item

    # Now populate the funds map with the nav values
    # from nav map
    for akey in funds.keys():
        fund_item = funds[akey]
        nav_item = nav_map[fund_item["scode"]]
        fund_item["nav"] = float(nav_item["nav"])
        fund_item["date"] = nav_item["date"]


def read_funds_json(funds_file_name):
    with open(funds_file_name) as json_file:
        funds = json.load(json_file)
    return funds     

def get_change_str(change):
    change_str = str(round(change, 2))
    
    if (change >= 0):
        change_str = "+" + change_str + "%"
    else:
        change_str = change_str + "%"
    return change_str
            
def print_funds_summary(funds):
    total_purchase = 0
    total_present = 0
    
    for key in (x[0] for x in sorted(funds.items(), key=lambda x: x[1]["nick"])):
        fund = funds.get(key)
        present_price = fund["nav"] * fund["purchase_units"]
        purchase_price = fund["purchase_price"]
        total_purchase = total_purchase + purchase_price
        total_present = total_present + present_price 
        purchase_date = fund["purchase_date"]
        
        change = ((present_price - purchase_price)/purchase_price) * 100
        yearly = get_yearly_increase(purchase_date, change)
        
        print row_format.format(fund["nick"], purchase_price, 
                                round(present_price, 2), get_change_str(change),
                                purchase_date,  get_change_str(yearly))
    print "================================================================================================="
    
    total_change = ((total_present - total_purchase)/total_purchase) * 100
    print total_format.format("Total", total_purchase, round(total_present, 2), 
                            get_change_str(total_change))
    
import sys

def main():
    funds = read_funds_json(sys.path[0] + "/" + funds_file_name)
    populate_funds_nav(funds)
    print_funds_summary(funds)

from datetime import datetime

def get_yearly_increase(purchase_date_str, increase):
    purchase_date = datetime.strptime(purchase_date_str, "%d/%m/%Y")
    current_date = datetime.now()
    delta = current_date - purchase_date
    if delta.days > 0:
        return increase * 365 / delta.days
    return 0.0
    
    
if __name__ == '__main__':
    main()
    
